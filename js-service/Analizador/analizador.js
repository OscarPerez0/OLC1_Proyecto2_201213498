/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var err_lexema = '';
var esperados = [];
var tokens = [];
var errores = [];

function analizar(data) {
    try {
        tokens = [];
        errores = [];
        salida = analizador.parse(data);
        return salida;
    } catch (error) {
        console.log(error);
        return null;
    }
}
module.exports.analizar = analizar;


var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,22],$V4=[1,24],$V5=[1,27],$V6=[1,25],$V7=[1,26],$V8=[1,28],$V9=[1,29],$Va=[2,7,12,32,83,84,85,86],$Vb=[18,21],$Vc=[2,16],$Vd=[1,47],$Ve=[1,60],$Vf=[1,57],$Vg=[1,56],$Vh=[1,59],$Vi=[1,61],$Vj=[1,62],$Vk=[1,63],$Vl=[1,53],$Vm=[2,27],$Vn=[1,70],$Vo=[1,71],$Vp=[1,72],$Vq=[18,21,35,79,80,81],$Vr=[1,81],$Vs=[1,80],$Vt=[1,82],$Vu=[1,83],$Vv=[18,21,35,64,65,66,67,73,74,75,76,77,78,79,80,81],$Vw=[2,72],$Vx=[1,86],$Vy=[21,35],$Vz=[18,21,35,80,81],$VA=[18,21,35,64,65,73,74,75,76,77,78,79,80,81],$VB=[1,124],$VC=[1,136],$VD=[1,128],$VE=[1,129],$VF=[1,130],$VG=[1,131],$VH=[1,132],$VI=[1,133],$VJ=[1,134],$VK=[1,137],$VL=[2,9,12,32,45,46,47,48,54,57,58,60,83,84,85,86],$VM=[1,157];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"clases":4,"EOF":5,"clase":6,"RPUBLIC":7,"t_class":8,"IDENTIFICADOR":9,"LLAVE_A":10,"l_cuerpo_clase":11,"LLAVE_C":12,"RCLASS":13,"RINTERFACE":14,"cuerpo_clase":15,"metodo":16,"declaracion":17,"PTCOMA":18,"tipo":19,"l_dec":20,"COMA":21,"asig":22,"ASIG":23,"expresion_logica":24,"metodo_imp":25,"metodo_definicion":26,"main":27,"RSTATIC":28,"RVOID":29,"RMAIN":30,"PARENTESIS_A":31,"RSTRING":32,"CORCHETE_A":33,"CORCHETE_C":34,"PARENTESIS_C":35,"instrucciones":36,"t_retorno":37,"parametros":38,"l_paramentros":39,"instruccion":40,"instruccion_inline":41,"instruccion_bloque":42,"llamada":43,"asignacion":44,"RBREAK":45,"RCONTINUE":46,"RRETURN":47,"RSYSTEM":48,"PTO":49,"ROUT":50,"RPRINT":51,"expresion":52,"RPRINTLN":53,"RFOR":54,"for_declaracion":55,"for_incremento":56,"RWHILE":57,"RDO":58,"if":59,"RIF":60,"RELSE":61,"l_arg":62,"expresion_numerica":63,"MENOS":64,"MAS":65,"MULT":66,"DIV":67,"ENTERO":68,"CADENA":69,"DECIMAL":70,"CHAR":71,"expresion_relacional":72,"MAYOR":73,"MENOR":74,"MAYORI":75,"MENORI":76,"IGUAL":77,"DIF":78,"AND":79,"XOR":80,"OR":81,"NOT":82,"RINT":83,"RDOUBLE":84,"RCHAR":85,"RBOOLEAN":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RPUBLIC",9:"IDENTIFICADOR",10:"LLAVE_A",12:"LLAVE_C",13:"RCLASS",14:"RINTERFACE",18:"PTCOMA",21:"COMA",23:"ASIG",28:"RSTATIC",29:"RVOID",30:"RMAIN",31:"PARENTESIS_A",32:"RSTRING",33:"CORCHETE_A",34:"CORCHETE_C",35:"PARENTESIS_C",45:"RBREAK",46:"RCONTINUE",47:"RRETURN",48:"RSYSTEM",49:"PTO",50:"ROUT",51:"RPRINT",53:"RPRINTLN",54:"RFOR",57:"RWHILE",58:"RDO",60:"RIF",61:"RELSE",64:"MENOS",65:"MAS",66:"MULT",67:"DIV",68:"ENTERO",69:"CADENA",70:"DECIMAL",71:"CHAR",73:"MAYOR",74:"MENOR",75:"MAYORI",76:"MENORI",77:"IGUAL",78:"DIF",79:"AND",80:"XOR",81:"OR",82:"NOT",83:"RINT",84:"RDOUBLE",85:"RCHAR",86:"RBOOLEAN"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,2],[6,2],[8,1],[8,1],[11,2],[11,1],[15,1],[15,2],[17,2],[20,4],[20,2],[22,0],[22,2],[16,1],[16,1],[16,1],[16,2],[27,13],[26,7],[25,9],[25,8],[38,1],[38,0],[39,4],[39,2],[36,2],[36,1],[40,1],[40,1],[40,2],[40,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,3],[41,9],[41,9],[42,11],[42,7],[42,9],[42,1],[56,1],[56,1],[44,3],[55,1],[55,1],[59,7],[59,9],[59,11],[43,4],[43,3],[62,3],[62,1],[52,1],[63,2],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,1],[24,3],[24,3],[24,3],[24,2],[24,1],[19,1],[19,1],[19,1],[19,1],[19,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        var raiz = new Nodo("ini", "");
        raiz.agregarHijo($$[$0-1]);

        return { arbol: raiz, ttokens: tokens, terrores: errores};
     
break;
case 2:

        var  padre = new Nodo("clases", "");
        padre.agregarHijo($$[$0-1]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;

        // $$[$0-1].push($$[$0]);
        // this.$ = $$[$0-1];
    
break;
case 3: case 7: case 8: case 10: case 11: case 17: case 18: case 19: case 20: case 26: case 32: case 33: case 48: case 52: case 53: case 60: case 61: case 70:
 this.$ = $$[$0]; 
break;
case 4:

        let clase = new Nodo($$[$0-4], $$[$0-3]);
        clase.agregarHijo($$[$0-1]);
        this.$ = clase;        
    
break;
case 5:

        console.log(esperados);
        e = new Error(err_lexema, this._$.first_line, this._$.first_column, esperados , "Error sintactico");
        errores.push(e);
        console.log('Se encontro un error, sincronizando con llave que cierra');
    
break;
case 6:

        console.log(esperados);
        e = new Error(err_lexema, this._$.first_line, this._$.first_column, esperados , "Error sintactico");
        console.log('Se encontro un error, sincronizando con fin de archivo');
        errores.push(e);
    
break;
case 9:

        let l_cuerpo_clase = new Nodo('l_cuerpo_clase', '');
        l_cuerpo_clase.agregarHijo($$[$0-1]);
        l_cuerpo_clase.agregarHijo($$[$0]);

        this.$ = l_cuerpo_clase;
    
break;
case 12: case 36: case 37: case 38:
 this.$ = $$[$0-1]; 
break;
case 13:

        let declaracion = new Nodo('declaracion', '');
        declaracion.agregarHijo($$[$0-1]);
        declaracion.agregarHijo($$[$0]);
        this.$ = declaracion;
    
break;
case 14:
 
        padre = new Nodo('l_dec','');
        padre.agregarHijo($$[$0-3]);

        padre_t = new Nodo('asig', $$[$0-1]);

        if($$[$0] !== undefined) {
            padre_t.agregarHijo($$[$0]);
        }

        padre.agregarHijo(padre_t)
        

        this.$ = padre;
    
break;
case 15:
 
        padre = new Nodo('asig', $$[$0-1]);
        if($$[$0] !== undefined) {
            padre.agregarHijo($$[$0]);
        }
        
        this.$ = padre;
    
break;
case 21:

        console.log(esperados)
        e = new Error(err_lexema, this._$.first_line, this._$.first_column, esperados, "Error sintactico");
        errores.push(e);
        console.log('Se encontro un error. Sincronizando con }');        
    
break;
case 22:

        padre = new Nodo('main', $$[$0-6]);
        padre.agregarHijo($$[$0-1]);

        this.$ = padre;
    
break;
case 23:

        padre = new Nodo('metodo', $$[$0-4]);
        padre.agregarHijo($$[$0-5]);

        if($$[$0-2] != undefined) {
            padre.agregarHijo($$[$0-2]);
        }

        
        this.$ = padre;
    
break;
case 24:

        padre = new Nodo('metodo', $$[$0-6]);
        padre.agregarHijo($$[$0-7]);

        if ($$[$0-4] !== undefined) {
            padre.agregarHijo($$[$0-4]);
        }
        

        padre.agregarHijo($$[$0-1]);   
        this.$ = padre;

    
break;
case 25:

        //Este es para el metodo constructor
        padre = new Nodo('metodo', $$[$0-6]);
        if ($$[$0-4] !== undefined) {
            padre.agregarHijo($$[$0-4]);
        }
        
        padre.agregarHijo($$[$0-1]);   
        this.$ = padre;
    
break;
case 28:

        padre = new Nodo('l_parametro', '');
        
        var padret = new Nodo('parametro', $$[$0]);
        padret.agregarHijo($$[$0-1]);

        padre.agregarHijo($$[$0-3]);
        padre.agregarHijo(padret);

        this.$ = padre;
    
break;
case 29:
 
        padre = new Nodo('parametro', $$[$0]);
        padre.agregarHijo($$[$0-1]);
        this.$ = padre;
     
break;
case 30:

        let instrucciones = new Nodo('instrucciones', '');
        instrucciones.agregarHijo($$[$0-1]);
        instrucciones.agregarHijo($$[$0]);
        
        this.$ = instrucciones;
    
break;
case 31:
 
        padre = new Nodo('instrucciones', '');
        padre.agregarHijo($$[$0]);
        this.$ = padre;
     
break;
case 34:

        e = new Error(err_lexema, this._$.first_line, this._$.first_column, esperados, "Error sintactico");
        errores.push(e);
        console.log('Se encontro un error. Sincronizando con -- instrucciones inline --  lexema' + err_lexema + ' actual' + yytext)
    
break;
case 35:
 
        e = new Error(err_lexema, this._$.first_line, this._$.first_column, esperados , "Error sintactico");
        errores.push(e);
        console.log('Se encontro un error. Sincronizando con -- instrucciones inline --  lexema' + err_lexema + ' actual' + yytext)
    
break;
case 39:
 this.$ = new Nodo('break', ''); 
break;
case 40:
 this.$ = new Nodo('continue', ''); 
break;
case 41:
 this.$ = new Nodo('return', ''); 
break;
case 42:
 
        padre = new Nodo('return', ''); 
        padre.agregarHijo($$[$0-1]);
        this.$ = padre;
    
break;
case 43:
 
        padre = new Nodo('print', ''); 
        padre.agregarHijo($$[$0-2]);
        this.$ = padre;
    
break;
case 44:
 
        padre = new Nodo('println',''); 
        padre.agregarHijo($$[$0-2]);
        this.$ = padre;
    
break;
case 45:

        padre = new Nodo('for', '');

        let t_c_for = new Nodo('condicion', '');
        t_c_for.agregarHijo($$[$0-6]);

        let t_i_for = new Nodo('incremento', '');
        t_i_for.agregarHijo($$[$0-4]);

        let t_cr_for = new Nodo('cuerpo', '');
        t_cr_for.agregarHijo($$[$0-1]);

        padre.agregarHijo($$[$0-8]);
        padre.agregarHijo(t_c_for);
        padre.agregarHijo(t_i_for);
        padre.agregarHijo(t_cr_for);
        this.$ = padre;
    
break;
case 46:

        padre = new Nodo('while', '');

        let t_while = new Nodo('condicion', '');
        t_c_while.agregarHijo($$[$0-4]);
        let t_cr_while = new Nodo('cuerpo', '');
        t_cr_while.agregarHijo($$[$0-1]);
        padre.agregarHijo(t_c_while);
        padre.agregarHijo(t_cr_while);
        this.$ = padre;
    
break;
case 47:

        padre = new Nodo('do', '');

        let t_c_do = new Nodo('condicion', '');
        t_c_do.agregarHijo($$[$0-2]);
        let t_cr_do = new Nodo('cuerpo', '');
        t_cr_do.agregarHijo($$[$0-6]);

        padre.agregarHijo(t_cr_do);
        padre.agregarHijo(t_c_do);
        this.$ = padre;
    
break;
case 49: case 50:

        this.$ = $$[$0];
    
break;
case 51:

        padre = new Nodo('asignacion', $$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
    
break;
case 54:
 
        padre = new Nodo('if', '');
        var condicion = new Nodo('condicion', '')
        condicion.agregarHijo($$[$0-4]);
        var cuerpo = new Nodo('cuerpo', '');
        cuerpo.agregarHijo($$[$0-1]);

        padre.agregarHijo(condicion);
        padre.agregarHijo(cuerpo);
        this.$ = padre;
     
break;
case 55:
 
        padre = new Nodo('if', '');

        condicion = new Nodo('condicion', '')
        condicion.agregarHijo($$[$0-6]);

        cuerpo = new Nodo('cuerpo', '');
        cuerpo.agregarHijo($$[$0-3]);

        var else_if = new Nodo('else_if', '');
        else_if.agregarHijo($$[$0]);

        padre.agregarHijo(condicion);
        padre.agregarHijo(cuerpo);
        padre.agregarHijo(else_if);
        this.$ = padre;
     
break;
case 56:
 
        padre = new Nodo('if', '');

        condicion = new Nodo('condicion', '')
        condicion.agregarHijo($$[$0-8]);

        cuerpo = new Nodo('cuerpo', '');
        cuerpo.agregarHijo($$[$0-5]);

        var else_ = new Nodo('else', '');
        else_.agregarHijo($$[$0-1]);

        padre.agregarHijo(condicion);
        padre.agregarHijo(cuerpo);
        padre.agregarHijo(else_);
        this.$ = padre;
     
break;
case 57:

        padre = new Nodo('llamada', $$[$0-3]);
        padre.agregarHijo($$[$0-1]);
        this.$ = padre;
    
break;
case 58:

        padre = new Nodo('llamada', $$[$0-2]);
        this.$ = padre;
    
break;
case 59:

        padre = new Nodo('l_arg', '');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
    
break;
case 62:
 
        padre = new Nodo('expresion_numerica', '');
        t_en = new Nodo('expresion_numerica', '-');
        padre.agregarHijo(t_en);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
     
break;
case 63:
 
        padre = new Nodo('expresion_numerica', '++');
        padre.agregarHijo($$[$0-2]);
        this.$ = padre;
     
break;
case 64:
 
        padre = new Nodo('expresion_numerica', '--');
        padre.agregarHijo($$[$0-2]);        
        this.$ = padre;
     
break;
case 65:
 
        padre = new Nodo('expresion_numerica', '+');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
     
break;
case 66:
 
        padre = new Nodo('expresion_numerica', '-');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
     
break;
case 67:
 
        padre = new Nodo('expresion_numerica', '*');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
    
break;
case 68:
 
        padre = new Nodo('expresion_numerica', '/');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
     
break;
case 69:
 
        padre = new Nodo('parentesis', '');
        padre.agregarHijo($$[$0-1]);
        this.$ = padre;
     
break;
case 71: case 72: case 73: case 74: case 75:
 this.$ = new Nodo('expresion_numerica', $$[$0]); 
break;
case 76: case 77: case 78: case 79: case 80: case 81:
 
        padre = new Nodo('expresion_relacional', $$[$0-1]);
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
     
break;
case 82:
 
        // padre = new Nodo('expresion_numerica', '');
        // padre.agregarHijo($$[$0]);
        // this.$ = padre; 
        this.$ = $$[$0];
    
break;
case 83:
 
        padre = new Nodo('expresion_logica', 'and');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
    
break;
case 84:

        padre = new Nodo('expresion_logica', 'xor');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
    
break;
case 85:
 
        padre = new Nodo('expresion_logica', 'or');
        padre.agregarHijo($$[$0-2]);
        padre.agregarHijo($$[$0]);
        this.$ = padre;
     
break;
case 86:
 
        padre = new Nodo('expresion_logica', 'not');
        padre.agregarHijo($$[$0]);

        this.$ = padre;
     
break;
case 87:
 
        // padre = new Nodo('expresion_relacional', '');
        // padre.agregarHijo($$[$0]);
        // this.$ = padre;
        this.$ = $$[$0];
     
break;
case 88: case 89: case 90: case 91: case 92:
 this.$ = new Nodo('tipo', $$[$0]); 
break;
case 93: case 94: case 95: case 96: case 97: case 98:
 this.$ = new Nodo('t_retorno', $$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:8,13:[1,9],14:[1,10]},{5:[1,12],12:[1,11]},{1:[2,1]},o($V2,[2,2]),{9:[1,13]},{9:[2,7]},{9:[2,8]},o($V2,[2,5]),o($V2,[2,6]),{10:[1,14]},{2:$V3,7:$V4,11:15,15:16,16:17,17:18,19:23,25:19,26:20,27:21,32:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{2:$V3,7:$V4,12:[1,30],15:31,16:17,17:18,19:23,25:19,26:20,27:21,32:$V5,83:$V6,84:$V7,85:$V8,86:$V9},o($Va,[2,10]),o($Va,[2,11]),{18:[1,32]},o($Va,[2,18]),o($Va,[2,19]),o($Va,[2,20]),{12:[1,33]},{9:[1,35],20:34},{9:[1,37],28:[1,38],29:[1,44],32:[1,41],37:36,83:[1,39],84:[1,40],85:[1,42],86:[1,43]},{9:[2,88]},{9:[2,89]},{9:[2,90]},{9:[2,91]},{9:[2,92]},o($V2,[2,4]),o($Va,[2,9]),o($Va,[2,12]),o($Va,[2,21]),{18:[2,13],21:[1,45]},o($Vb,$Vc,{22:46,23:$Vd}),{9:[1,48]},{31:[1,49]},{29:[1,50]},{9:[2,93]},{9:[2,94]},{9:[2,95]},{9:[2,96]},{9:[2,97]},{9:[2,98]},{9:[1,51]},o($Vb,[2,15]),{9:$Ve,24:52,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{31:[1,64]},{19:67,32:$V5,35:$Vm,38:65,39:66,83:$V6,84:$V7,85:$V8,86:$V9},{30:[1,68]},o($Vb,$Vc,{22:69,23:$Vd}),o($Vb,[2,17],{79:$Vn,80:$Vo,81:$Vp}),{9:$Ve,24:73,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},o($Vq,[2,87]),o($Vq,[2,82],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,73:[1,74],74:[1,75],75:[1,76],76:[1,77],77:[1,78],78:[1,79]}),{9:$Ve,31:$Vf,43:58,63:84,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,24:85,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},o($Vv,[2,70]),o($Vv,[2,71]),o($Vv,$Vw,{31:$Vx}),o($Vv,[2,73]),o($Vv,[2,74]),o($Vv,[2,75]),{19:67,32:$V5,35:$Vm,38:87,39:66,83:$V6,84:$V7,85:$V8,86:$V9},{35:[1,88]},{21:[1,89],35:[2,26]},{9:[1,90]},{31:[1,91]},o($Vb,[2,14]),{9:$Ve,24:92,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{9:$Ve,24:93,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{9:$Ve,24:94,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},o($Vq,[2,86]),{9:$Ve,31:$Vf,43:58,63:95,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:96,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:97,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:98,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:99,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:100,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:102,64:$Vg,65:[1,101],68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:104,64:[1,103],68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:105,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,63:106,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},o($Vv,[2,62]),{35:[1,107],79:$Vn,80:$Vo,81:$Vp},{9:$Ve,31:$Vf,35:[1,109],43:58,52:110,62:108,63:111,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{35:[1,112]},{10:[1,113]},{19:114,32:$V5,83:$V6,84:$V7,85:$V8,86:$V9},o($Vy,[2,29]),{32:[1,115]},o($Vq,[2,83]),o($Vz,[2,84],{79:$Vn}),o($Vz,[2,85],{79:$Vn}),o($Vq,[2,76],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vq,[2,77],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vq,[2,78],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vq,[2,79],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vq,[2,80],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vq,[2,81],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vv,[2,63]),o($VA,[2,65],{66:$Vt,67:$Vu}),o($Vv,[2,64],{43:58,63:84,9:$Ve,31:$Vf,68:$Vh,69:$Vi,70:$Vj,71:$Vk}),o($VA,[2,66],{66:$Vt,67:$Vu}),o($Vv,[2,67]),o($Vv,[2,68]),o($Vv,[2,69]),{21:[1,117],35:[1,116]},o($Vv,[2,58]),o($Vy,[2,60]),o($Vy,[2,61],{64:$Vr,65:$Vs,66:$Vt,67:$Vu}),{10:[1,118],18:[1,119]},{2:$VB,9:$VC,17:126,19:23,32:$V5,36:120,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{9:[1,138]},{9:[1,139]},o($Vv,[2,57]),{9:$Ve,31:$Vf,43:58,52:140,63:111,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{2:$VB,9:$VC,17:126,19:23,32:$V5,36:141,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},o($Va,[2,23]),{2:$VB,9:$VC,12:[1,142],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},o($VL,[2,31]),o($VL,[2,32]),o($VL,[2,33]),{12:[1,145],18:[1,144]},{18:[1,146]},{18:[1,147]},{18:[1,148]},{18:[1,149]},{18:[1,150]},{9:$Ve,18:[1,151],24:152,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{49:[1,153]},{31:[1,154]},{31:[1,155]},{10:[1,156]},o($VL,[2,48]),{23:$VM,31:$Vx},{31:[1,158]},o($Vy,[2,28]),{33:[1,159]},o($Vy,[2,59]),{2:$VB,9:$VC,12:[1,160],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},o($Va,[2,25]),o($VL,[2,30]),o($VL,[2,34]),o($VL,[2,35]),o($VL,[2,36]),o($VL,[2,37]),o($VL,[2,38]),o($VL,[2,39]),o($VL,[2,40]),o($VL,[2,41]),{18:[1,161],79:$Vn,80:$Vo,81:$Vp},{50:[1,162]},{9:[1,166],17:164,19:23,32:$V5,44:165,55:163,83:$V6,84:$V7,85:$V8,86:$V9},{9:$Ve,24:167,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{2:$VB,9:$VC,17:126,19:23,32:$V5,36:168,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{9:$Ve,24:169,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{9:$Ve,24:170,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{34:[1,171]},o($Va,[2,24]),o($VL,[2,42]),{49:[1,172]},{18:[1,173]},{18:[2,52]},{18:[2,53]},{23:$VM},{35:[1,174],79:$Vn,80:$Vo,81:$Vp},{2:$VB,9:$VC,12:[1,175],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},o([18,35],[2,51],{79:$Vn,80:$Vo,81:$Vp}),{35:[1,176],79:$Vn,80:$Vo,81:$Vp},{35:[1,177]},{51:[1,178],53:[1,179]},{9:$Ve,24:180,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{10:[1,181]},{57:[1,182]},{10:[1,183]},{10:[1,184]},{31:[1,185]},{31:[1,186]},{18:[1,187],79:$Vn,80:$Vo,81:$Vp},{2:$VB,9:$VC,17:126,19:23,32:$V5,36:188,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{31:[1,189]},{2:$VB,9:$VC,17:126,19:23,32:$V5,36:190,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{2:$VB,9:$VC,17:126,19:23,32:$V5,36:191,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{9:$Ve,31:$Vf,43:58,52:192,63:111,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:$Ve,31:$Vf,43:58,52:193,63:111,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{9:[1,197],31:$Vf,43:58,44:196,52:195,56:194,63:111,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk},{2:$VB,9:$VC,12:[1,198],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{9:$Ve,24:199,31:$Vf,43:58,63:55,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:54,82:$Vl},{2:$VB,9:$VC,12:[1,200],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{2:$VB,9:$VC,12:[1,201],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{35:[1,202]},{35:[1,203]},{35:[1,204]},{35:[2,49]},{35:[2,50]},o([35,64,65,66,67],$Vw,{23:$VM,31:$Vx}),o($VL,[2,46]),{35:[1,205],79:$Vn,80:$Vo,81:$Vp},o($VL,[2,54],{61:[1,206]}),o($Va,[2,22]),{18:[1,207]},{18:[1,208]},{10:[1,209]},{18:[1,210]},{10:[1,212],59:211,60:$VK},o($VL,[2,43]),o($VL,[2,44]),{2:$VB,9:$VC,17:126,19:23,32:$V5,36:213,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},o($VL,[2,47]),o($VL,[2,55]),{2:$VB,9:$VC,17:126,19:23,32:$V5,36:214,40:121,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{2:$VB,9:$VC,12:[1,215],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},{2:$VB,9:$VC,12:[1,216],17:126,19:23,32:$V5,40:143,41:122,42:123,43:125,44:127,45:$VD,46:$VE,47:$VF,48:$VG,54:$VH,57:$VI,58:$VJ,59:135,60:$VK,83:$V6,84:$V7,85:$V8,86:$V9},o($VL,[2,45]),o($VL,[2,56])],
defaultActions: {6:[2,1],9:[2,7],10:[2,8],25:[2,88],26:[2,89],27:[2,90],28:[2,91],29:[2,92],39:[2,93],40:[2,94],41:[2,95],42:[2,96],43:[2,97],44:[2,98],164:[2,52],165:[2,53],195:[2,49],196:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                esperados = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }

                esperados = [...expected];
                err_lexema = this.terminals_[symbol];

                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // aqui se llama al arbol
    const Nodo = require('./Nodo').Nodo;
    const Token = require('./Token').Token;
    const Error = require('./Token.js').Error;
    const api = require('./instrucciones').instruccionesAPI;
    const tipo = require('./instrucciones').tipo_operacion;
    const valor = require('./instrucciones').tipo_valor;
    const inst = require('./instrucciones').tipo_instruccion;

    console.log('los arreglos deberia de estar vacios en cada ejecucion...');
    console.log('tokens: ' + tokens.length);
    console.log('errores: '+ errores.length);

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://Comentarios unilinea
break;
case 2://comentarios multilinea
break;
case 3: tokens.push(new Token('r_public', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 7;
break;
case 4: tokens.push(new Token('r_class', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13; 
break;
case 5: tokens.push(new Token('r_interface', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 14;
break;
case 6: tokens.push(new Token('r_void', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 7: tokens.push(new Token('r_int', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 8: tokens.push(new Token('r_boolean', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 9: tokens.push(new Token('r_double', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 10: tokens.push(new Token('r_string', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 11: tokens.push(new Token('r_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 12: tokens.push(new Token('r_for', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 13: tokens.push(new Token('r_while', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 14: tokens.push(new Token('r_do', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 15: tokens.push(new Token('r_system', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 16: tokens.push(new Token('r_out', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 17: tokens.push(new Token('r_println', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 18: tokens.push(new Token('r_print', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 19: tokens.push(new Token('r_if', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 20: tokens.push(new Token('r_else', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 21: tokens.push(new Token('r_break', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 22: tokens.push(new Token('r_continue', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 23: tokens.push(new Token('r_return', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 24: tokens.push(new Token('r_static', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 25: tokens.push(new Token('r_main', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30
break;
case 26: tokens.push(new Token('tk_,', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 27: tokens.push(new Token('tk_;', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 18;
break;
case 28: tokens.push(new Token('tk_(', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 29: tokens.push(new Token('tk_)', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 30: tokens.push(new Token('tk_{', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 10;
break;
case 31: tokens.push(new Token('tk_}', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 32: tokens.push(new Token('tk_.', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 33: tokens.push(new Token('tk_[', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33; 
break;
case 34: tokens.push(new Token('tk_]', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34; 
break;
case 35: tokens.push(new Token('tk_>=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75; 
break;
case 36: tokens.push(new Token('tk_<=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76; 
break;
case 37: tokens.push(new Token('tk_==', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77; 
break;
case 38: tokens.push(new Token('tk_!=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78; 
break;
case 39: tokens.push(new Token('tk_>', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73; 
break;
case 40: tokens.push(new Token('tk_<', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74; 
break;
case 41: tokens.push(new Token('tk_=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23; 
break;
case 42: tokens.push(new Token('tk_and', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79; 
break;
case 43: tokens.push(new Token('tk_or', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81; 
break;
case 44: tokens.push(new Token('tk_not', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82; 
break;
case 45: tokens.push(new Token('tk_xor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80; 
break;
case 46: tokens.push(new Token('tk_+', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65; 
break;
case 47: tokens.push(new Token('tk_*', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66; 
break;
case 48: tokens.push(new Token('tk_/', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67; 
break;
case 49: tokens.push(new Token('tk_-', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64; 
break;
case 50: tokens.push(new Token('tk_identificador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9; 
break;
case 51: tokens.push(new Token('tk_entero', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68; 
break;
case 52: tokens.push(new Token('tk_decimal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70; 
break;
case 53:  /*yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2);*/ tokens.push(new Token('tk_cadena', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 69;                           
                            
break;
case 54: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); tokens.push(new Token('tk_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 71; 
                            
break;
case 55:return 5;
break;
case 56: 
                                errores.push(new Error(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column, 'Caracter Desconocido', 'Error Lexico'));
                            
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:,)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*")/,/^(?:'[a-zA-Z]')/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}